// Generated by kea-typegen on Tue, 01 Aug 2023 14:39:52 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { PieceType } from './pieces'

export interface coreLogicType extends Logic {
    actionCreators: {
        setCategory: (category: string) => ({
            type: "set category (...src.coreLogic)";
            payload: {
                category: string;
            };
        });
        addVisiblePiece: (id: PieceType["id"]) => ({
            type: "add visible piece (...src.coreLogic)";
            payload: {
                id: string;
            };
        });
        removeVisiblePiece: (id: PieceType["id"]) => ({
            type: "remove visible piece (...src.coreLogic)";
            payload: {
                id: string;
            };
        });
        setPresentationMode: (presentationMode: boolean) => ({
            type: "set presentation mode (...src.coreLogic)";
            payload: {
                presentationMode: boolean;
            };
        });
    };
    actionKeys: {
        "set category (...src.coreLogic)": "setCategory";
        "add visible piece (...src.coreLogic)": "addVisiblePiece";
        "remove visible piece (...src.coreLogic)": "removeVisiblePiece";
        "set presentation mode (...src.coreLogic)": "setPresentationMode";
    };
    actionTypes: {
        setCategory: "set category (...src.coreLogic)";
        addVisiblePiece: "add visible piece (...src.coreLogic)";
        removeVisiblePiece: "remove visible piece (...src.coreLogic)";
        setPresentationMode: "set presentation mode (...src.coreLogic)";
    };
    actions: {
        setCategory: (category: string) => void;
        addVisiblePiece: (id: PieceType["id"]) => void;
        removeVisiblePiece: (id: PieceType["id"]) => void;
        setPresentationMode: (presentationMode: boolean) => void;
    };
    asyncActions: {
        setCategory: (category: string) => Promise<any>;
        addVisiblePiece: (id: PieceType["id"]) => Promise<any>;
        removeVisiblePiece: (id: PieceType["id"]) => Promise<any>;
        setPresentationMode: (presentationMode: boolean) => Promise<any>;
    };
    defaults: {
        currentCategory: string;
        visiblePieces: Set<unknown>;
        presentationMode: boolean;
    };
    events: {};
    key: undefined;
    listeners: {};
    path: [
        "",
        "",
        "",
        "src",
        "coreLogic"
    ];
    pathString: "...src.coreLogic";
    props: Record<string, unknown>;
    reducer: (state: any, action: any, fullState: any) => {
        currentCategory: string;
        visiblePieces: Set<unknown>;
        presentationMode: boolean;
    };
    reducers: {
        currentCategory: (state: string, action: any, fullState: any) => string;
        visiblePieces: (state: Set<unknown>, action: any, fullState: any) => Set<unknown>;
        presentationMode: (state: boolean, action: any, fullState: any) => boolean;
    };
    selector: (state: any) => {
        currentCategory: string;
        visiblePieces: Set<unknown>;
        presentationMode: boolean;
    };
    selectors: {
        currentCategory: (state: any, props?: any) => string;
        visiblePieces: (state: any, props?: any) => Set<unknown>;
        presentationMode: (state: any, props?: any) => boolean;
        filteredPieces: (state: any, props?: any) => PieceType[];
    };
    sharedListeners: {};
    values: {
        currentCategory: string;
        visiblePieces: Set<unknown>;
        presentationMode: boolean;
        filteredPieces: PieceType[];
    };
    _isKea: true;
    _isKeaWithKey: false;
    __keaTypeGenInternalSelectorTypes: {
        filteredPieces: (currentCategory: string) => PieceType[];
    };
}